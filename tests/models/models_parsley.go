// Code generated by parsley for scanning JSON strings. DO NOT EDIT.
package models

import (
	parse "github.com/Soreing/parsley"
	reader "github.com/Soreing/parsley/reader"
	externals "github.com/Soreing/parsley/tests/externals"
)

var _ *reader.Reader

func (o *Employee) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	c := [7]bool{}
	f := [7][]parse.Filter{}
	if filter == nil {
		for i := range c {
			c[i] = true
		}
	} else {
		for i := range filter {
			k := filter[i].Field
			if k == "id" {
				c[0] = true
			} else if k == "person" {
				c[1], f[1] = true, filter[i].Filter
			} else if k == "devices" {
				c[2], f[2] = true, filter[i].Filter
			} else if k == "isActive" {
				c[3] = true
			} else if k == "rating" {
				c[4] = true
			} else if k == "lineManager" {
				c[5], f[5] = true, filter[i].Filter
			} else if k == "tags" {
				c[6] = true
			}
		}
	}
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					if string(key) == "id" && c[0] {
						o.Id, err = r.String()
					} else if string(key) == "person" && c[1] {
						err = o.Person.DecodeObjectPJSON(r, f[1])
					} else if string(key) == "devices" && c[2] {
						o.Devices, err = (*externals.Device)(nil).DecodeSlicePJSON(r, f[2])
					} else if string(key) == "isActive" && c[3] {
						o.IsActive, err = r.Bool()
					} else if string(key) == "rating" && c[4] {
						o.Rating, err = r.Float64()
					} else if string(key) == "lineManager" && c[5] {
						o.LineManager = &Employee{}
						err = o.LineManager.DecodeObjectPJSON(r, f[5])
					} else if string(key) == "tags" && c[6] {
						o.Tags, err = r.Strings()
					} else {
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *Employee) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []Employee, err error) {
	var e Employee
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]Employee, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *Employee) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []Employee, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []Employee{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *Person) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	c := [3]bool{}
	if filter == nil {
		for i := range c {
			c[i] = true
		}
	} else {
		for i := range filter {
			k := filter[i].Field
			if k == "fname" {
				c[0] = true
			} else if k == "lname" {
				c[1] = true
			} else if k == "dob" {
				c[2] = true
			}
		}
	}
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					if string(key) == "fname" && c[0] {
						o.Fname, err = r.String()
					} else if string(key) == "lname" && c[1] {
						o.Lname, err = r.String()
					} else if string(key) == "dob" && c[2] {
						o.DOB, err = r.Time()
					} else {
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *Person) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []Person, err error) {
	var e Person
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]Person, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *Person) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []Person, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []Person{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *EmployeeList) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	*o, err = (*Employee)(nil).DecodeSlicePJSON(r, filter)
	return
}

func (o *EmployeeList) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []EmployeeList, err error) {
	var e EmployeeList
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]EmployeeList, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EmployeeList) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []EmployeeList, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []EmployeeList{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}
