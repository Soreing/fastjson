// Code generated by parsley for scanning JSON strings. DO NOT EDIT.
package models

import (
    externals "github.com/Soreing/parsley/tests/externals"
    reader "github.com/Soreing/parsley/reader"
)

func (o *Employee)UnmarshalParsleyJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "id":
                        o.Id, err = r.GetString()
                    case "person":
                        err = o.Person.UnmarshalParsleyJSON(r)
                    case "devices":
                        o.Devices, err = (*externals.Device)(nil).UnmarshalParsleyJSONSlice(r)
                    case "isActive":
                        o.IsActive, err = r.GetBoolean()
                    case "rating":
                        o.Rating, err = r.GetFloat64()
                    case "lineManager":
                        o.LineManager = &Employee{}
                        err = o.LineManager.UnmarshalParsleyJSON(r)
                    case "tags":
                        o.Tags, err = r.GetStrings()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Employee)sequenceParsleyJSON(r *reader.Reader, idx int) (res []Employee, err error) {
    var e Employee
    if err = e.UnmarshalParsleyJSON(r); err == nil {
        if !r.Next() {
            res = make([]Employee, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceParsleyJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Employee) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []Employee, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *Person)UnmarshalParsleyJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "fname":
                        o.Fname, err = r.GetString()
                    case "lname":
                        o.Lname, err = r.GetString()
                    case "dob":
                        o.DOB, err = r.GetTime()
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Person)sequenceParsleyJSON(r *reader.Reader, idx int) (res []Person, err error) {
    var e Person
    if err = e.UnmarshalParsleyJSON(r); err == nil {
        if !r.Next() {
            res = make([]Person, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceParsleyJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Person) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []Person, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *EmployeeList)UnmarshalParsleyJSON(r *reader.Reader) (err error) {
    *o, err = (*Employee)(nil).UnmarshalParsleyJSONSlice(r)
    return
}

func (o *EmployeeList)sequenceParsleyJSON(r *reader.Reader, idx int) (res []EmployeeList, err error) {
    var e EmployeeList
    if err = e.UnmarshalParsleyJSON(r); err == nil {
        if !r.Next() {
            res = make([]EmployeeList, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceParsleyJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *EmployeeList) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []EmployeeList, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

