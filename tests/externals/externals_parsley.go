// Code generated by parsley for scanning JSON strings. DO NOT EDIT.
package externals

import (
    reader "github.com/Soreing/parsley/reader"
)

func (o *Device)UnmarshalParsleyJSON(r *reader.Reader) (err error) {
    var key []byte
    err = r.OpenObject()
    if r.GetType() != reader.TerminatorToken {
        for err == nil {
            if key, err = r.GetKey(); err == nil {
                if r.IsNull() {
                    r.SkipNull()
                } else {
                    switch string(key) {
                    case "name":
                        o.Name, err = r.GetString()
                    case "type":
                        err = o.Type.UnmarshalParsleyJSON(r)
                    default:
                        err = r.Skip()
                    }
                }
                if err == nil && !r.Next() {
                    break
                }
            }
        }
    }
    if err == nil {
        err = r.CloseObject()
    }
    return
}

func (o *Device)sequenceParsleyJSON(r *reader.Reader, idx int) (res []Device, err error) {
    var e Device
    if err = e.UnmarshalParsleyJSON(r); err == nil {
        if !r.Next() {
            res = make([]Device, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceParsleyJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *Device) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []Device, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

func (o *DeviceType)UnmarshalParsleyJSON(r *reader.Reader) (err error) {
    *(*int)(o), err = r.GetInt()
    return
}

func (o *DeviceType)sequenceParsleyJSON(r *reader.Reader, idx int) (res []DeviceType, err error) {
    var e DeviceType
    if err = e.UnmarshalParsleyJSON(r); err == nil {
        if !r.Next() {
            res = make([]DeviceType, idx+1)
            res[idx] = e
            return
        } else if res, err = o.sequenceParsleyJSON(r, idx + 1); err == nil {
            res[idx] = e
        }
    }
    return
}

func (o *DeviceType) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []DeviceType, err error) {
    if err = r.OpenArray(); err == nil {
        if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
            err = r.CloseArray()
        }
    }
    return
}

