// Code generated by parsley for scanning JSON strings. DO NOT EDIT.
package controls

import (
	reader "github.com/Soreing/parsley/reader"
	writer "github.com/Soreing/parsley/writer"
)

var _ *reader.Reader
var _ *writer.Writer

func (o *EmptyObject) UnmarshalParsleyJSON(r *reader.Reader) (err error) {
	var key []byte
	err = r.OpenObject()
	if r.GetType() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.GetKey(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					switch string(key) {
					default:
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *EmptyObject) sequenceParsleyJSON(r *reader.Reader, idx int) (res []EmptyObject, err error) {
	var e EmptyObject
	if err = e.UnmarshalParsleyJSON(r); err == nil {
		if !r.Next() {
			res = make([]EmptyObject, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequenceParsleyJSON(r, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EmptyObject) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []EmptyObject, err error) {
	if err = r.OpenArray(); err == nil {
		if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *EmptyObject) MarshalParsleyJSON(w *writer.Writer) {
	if o == nil {
		w.Raw("null")
	} else {
		w.Byte('{')
		w.Byte('}')
	}
}

func (o *EmptyObject) MarshalParsleyJSONSlice(w *writer.Writer, slc []EmptyObject) {
	if slc == nil {
		w.Raw("null")
	} else if len(slc) == 0 {
		w.Raw("[]")
	} else {
		w.Byte('[')
		slc[0].MarshalParsleyJSON(w)
		for i := 1; i < len(slc); i++ {
			w.Byte(',')
			slc[i].MarshalParsleyJSON(w)
		}
		w.Byte(']')
	}
}

func (o *EmptyObject) LengthParsleyJSON() (ln int) {
	if o == nil {
		return 4
	}
	ln = 0
	if ln == 0 {
		return 2
	}
	return ln + 1
}

func (o *EmptyObject) LengthParsleyJSONSlice(slc []EmptyObject) (ln int) {
	for _, obj := range slc {
		ln += obj.LengthParsleyJSON() + 1
	}
	if ln == 0 {
		return 2
	} else {
		return ln + 1
	}
}

func (o *EscapedField) UnmarshalParsleyJSON(r *reader.Reader) (err error) {
	var key []byte
	err = r.OpenObject()
	if r.GetType() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.GetKey(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					switch string(key) {
					case "soɯə \"value\"":
						o.Value, err = r.GetString()
					default:
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *EscapedField) sequenceParsleyJSON(r *reader.Reader, idx int) (res []EscapedField, err error) {
	var e EscapedField
	if err = e.UnmarshalParsleyJSON(r); err == nil {
		if !r.Next() {
			res = make([]EscapedField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequenceParsleyJSON(r, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EscapedField) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []EscapedField, err error) {
	if err = r.OpenArray(); err == nil {
		if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *EscapedField) MarshalParsleyJSON(w *writer.Writer) {
	if o == nil {
		w.Raw("null")
	} else {
		w.Byte('{')
		off := 1
		w.Raw(",\"soɯə \\\"value\\\"\":"[off:])
		w.String(o.Value)
		off = 0
		w.Byte('}')
	}
}

func (o *EscapedField) MarshalParsleyJSONSlice(w *writer.Writer, slc []EscapedField) {
	if slc == nil {
		w.Raw("null")
	} else if len(slc) == 0 {
		w.Raw("[]")
	} else {
		w.Byte('[')
		slc[0].MarshalParsleyJSON(w)
		for i := 1; i < len(slc); i++ {
			w.Byte(',')
			slc[i].MarshalParsleyJSON(w)
		}
		w.Byte(']')
	}
}

func (o *EscapedField) LengthParsleyJSON() (ln int) {
	if o == nil {
		return 4
	}
	ln = 22
	if o.Value != "" {
		ln += writer.StringLen(o.Value) - 2
	}
	if ln == 0 {
		return 2
	}
	return ln + 1
}

func (o *EscapedField) LengthParsleyJSONSlice(slc []EscapedField) (ln int) {
	for _, obj := range slc {
		ln += obj.LengthParsleyJSON() + 1
	}
	if ln == 0 {
		return 2
	} else {
		return ln + 1
	}
}

func (o *PrivateField) UnmarshalParsleyJSON(r *reader.Reader) (err error) {
	var key []byte
	err = r.OpenObject()
	if r.GetType() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.GetKey(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					switch string(key) {
					default:
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *PrivateField) sequenceParsleyJSON(r *reader.Reader, idx int) (res []PrivateField, err error) {
	var e PrivateField
	if err = e.UnmarshalParsleyJSON(r); err == nil {
		if !r.Next() {
			res = make([]PrivateField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequenceParsleyJSON(r, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *PrivateField) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []PrivateField, err error) {
	if err = r.OpenArray(); err == nil {
		if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *PrivateField) MarshalParsleyJSON(w *writer.Writer) {
	if o == nil {
		w.Raw("null")
	} else {
		w.Byte('{')
		w.Byte('}')
	}
}

func (o *PrivateField) MarshalParsleyJSONSlice(w *writer.Writer, slc []PrivateField) {
	if slc == nil {
		w.Raw("null")
	} else if len(slc) == 0 {
		w.Raw("[]")
	} else {
		w.Byte('[')
		slc[0].MarshalParsleyJSON(w)
		for i := 1; i < len(slc); i++ {
			w.Byte(',')
			slc[i].MarshalParsleyJSON(w)
		}
		w.Byte(']')
	}
}

func (o *PrivateField) LengthParsleyJSON() (ln int) {
	if o == nil {
		return 4
	}
	ln = 0
	if ln == 0 {
		return 2
	}
	return ln + 1
}

func (o *PrivateField) LengthParsleyJSONSlice(slc []PrivateField) (ln int) {
	for _, obj := range slc {
		ln += obj.LengthParsleyJSON() + 1
	}
	if ln == 0 {
		return 2
	} else {
		return ln + 1
	}
}

func (o *PublicField) UnmarshalParsleyJSON(r *reader.Reader) (err error) {
	var key []byte
	err = r.OpenObject()
	if r.GetType() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.GetKey(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					switch string(key) {
					case "field":
						o.field, err = r.GetString()
					default:
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *PublicField) sequenceParsleyJSON(r *reader.Reader, idx int) (res []PublicField, err error) {
	var e PublicField
	if err = e.UnmarshalParsleyJSON(r); err == nil {
		if !r.Next() {
			res = make([]PublicField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequenceParsleyJSON(r, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *PublicField) UnmarshalParsleyJSONSlice(r *reader.Reader) (res []PublicField, err error) {
	if err = r.OpenArray(); err == nil {
		if res, err = o.sequenceParsleyJSON(r, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *PublicField) MarshalParsleyJSON(w *writer.Writer) {
	if o == nil {
		w.Raw("null")
	} else {
		w.Byte('{')
		off := 1
		w.Raw(",\"field\":"[off:])
		w.String(o.field)
		off = 0
		w.Byte('}')
	}
}

func (o *PublicField) MarshalParsleyJSONSlice(w *writer.Writer, slc []PublicField) {
	if slc == nil {
		w.Raw("null")
	} else if len(slc) == 0 {
		w.Raw("[]")
	} else {
		w.Byte('[')
		slc[0].MarshalParsleyJSON(w)
		for i := 1; i < len(slc); i++ {
			w.Byte(',')
			slc[i].MarshalParsleyJSON(w)
		}
		w.Byte(']')
	}
}

func (o *PublicField) LengthParsleyJSON() (ln int) {
	if o == nil {
		return 4
	}
	ln = 11
	if o.field != "" {
		ln += writer.StringLen(o.field) - 2
	}
	if ln == 0 {
		return 2
	}
	return ln + 1
}

func (o *PublicField) LengthParsleyJSONSlice(slc []PublicField) (ln int) {
	for _, obj := range slc {
		ln += obj.LengthParsleyJSON() + 1
	}
	if ln == 0 {
		return 2
	} else {
		return ln + 1
	}
}
