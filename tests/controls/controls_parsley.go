// Code generated by parsley for scanning JSON strings. DO NOT EDIT.
package controls

import (
	parse "github.com/Soreing/parsley"
	reader "github.com/Soreing/parsley/reader"
)

var _ *reader.Reader

func (o *EmptyObject) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					err = r.Skip()
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *EmptyObject) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []EmptyObject, err error) {
	var e EmptyObject
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]EmptyObject, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EmptyObject) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []EmptyObject, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []EmptyObject{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *EscapedField) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	c := [1]bool{}
	if filter == nil {
		for i := range c {
			c[i] = true
		}
	} else {
		for i := range filter {
			k := filter[i].Field
			if k == "soɯə \"value\"" {
				c[0] = true
			}
		}
	}
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					if string(key) == "soɯə \"value\"" && c[0] {
						o.Value, err = r.String()
					} else {
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *EscapedField) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []EscapedField, err error) {
	var e EscapedField
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]EscapedField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EscapedField) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []EscapedField, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []EscapedField{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *PrivateField) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					err = r.Skip()
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *PrivateField) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []PrivateField, err error) {
	var e PrivateField
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]PrivateField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *PrivateField) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []PrivateField, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []PrivateField{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *PublicField) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	c := [1]bool{}
	if filter == nil {
		for i := range c {
			c[i] = true
		}
	} else {
		for i := range filter {
			k := filter[i].Field
			if k == "field" {
				c[0] = true
			}
		}
	}
	var key []byte
	_ = key
	err = r.OpenObject()
	if r.Token() != reader.TerminatorToken {
		for err == nil {
			if key, err = r.Key(); err == nil {
				if r.IsNull() {
					r.SkipNull()
				} else {
					if string(key) == "field" && c[0] {
						o.field, err = r.String()
					} else {
						err = r.Skip()
					}
				}
				if err == nil && !r.Next() {
					break
				}
			}
		}
	}
	if err == nil {
		err = r.CloseObject()
	}
	return
}

func (o *PublicField) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []PublicField, err error) {
	var e PublicField
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]PublicField, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *PublicField) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []PublicField, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []PublicField{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}

func (o *EmptyObjectList) DecodeObjectPJSON(r *reader.Reader, filter []parse.Filter) (err error) {
	*o, err = (*EmptyObject)(nil).DecodeSlicePJSON(r, filter)
	return
}

func (o *EmptyObjectList) sequencePJSON(r *reader.Reader, filter []parse.Filter, idx int) (res []EmptyObjectList, err error) {
	var e EmptyObjectList
	if err = e.DecodeObjectPJSON(r, filter); err == nil {
		if !r.Next() {
			res = make([]EmptyObjectList, idx+1)
			res[idx] = e
			return
		} else if res, err = o.sequencePJSON(r, filter, idx+1); err == nil {
			res[idx] = e
		}
	}
	return
}

func (o *EmptyObjectList) DecodeSlicePJSON(r *reader.Reader, filter []parse.Filter) (res []EmptyObjectList, err error) {
	if err = r.OpenArray(); err == nil {
		if r.Token() == reader.TerminatorToken {
			res = []EmptyObjectList{}
			err = r.CloseArray()
		} else if res, err = o.sequencePJSON(r, filter, 0); err == nil {
			err = r.CloseArray()
		}
	}
	return
}
